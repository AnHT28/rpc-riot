/*
 * Simple multiply service demo
 */

/*
 * Generated by erpcgen 1.14.0 on Fri Oct 17 16:27:45 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include <new>
#include "c_multiply_demo_server.h"
#include "multiply_demo_server.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


class MultiplyService_server: public MultiplyService_interface
{
    public:
        virtual ~MultiplyService_server() {};


        int32_t multiply(int32_t a, int32_t b)
        {
            int32_t result;
            result = ::multiply(a, b);

            return result;
        }
};

ERPC_MANUALLY_CONSTRUCTED_STATIC(MultiplyService_service, s_MultiplyService_service);
ERPC_MANUALLY_CONSTRUCTED_STATIC(MultiplyService_server, s_MultiplyService_server);

erpc_service_t create_MultiplyService_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) MultiplyService_service(new (nothrow)MultiplyService_server());
#else
    if (s_MultiplyService_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_MultiplyService_server.construct();
        s_MultiplyService_service.construct(s_MultiplyService_server.get());
        service = s_MultiplyService_service.get();
    }
#endif

    return service;
}

void destroy_MultiplyService_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (service)
    {
        delete (MultiplyService_server *)(((MultiplyService_service *)service)->getHandler());
        delete (MultiplyService_service *)service;
    }
#else
    (void)service;
    erpc_assert(service == s_MultiplyService_service.get());
    s_MultiplyService_service.destroy();
    s_MultiplyService_server.destroy();
#endif
}

