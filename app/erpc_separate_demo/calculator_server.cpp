/*
 * Calculator service demonstrating remote procedure calls
 */

/*
 * Generated by erpcgen 1.14.0 on Thu Oct 30 12:45:04 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "calculator_server.hpp"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11400 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;
using namespace erpcShim;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif



Calculator_service::Calculator_service(Calculator_interface *_Calculator_interface)
    : erpc::Service(Calculator_interface::m_serviceId)
    , m_handler(_Calculator_interface)
{
}

Calculator_service::~Calculator_service()
{
}

// return service interface handler.
Calculator_interface* Calculator_service::getHandler(void)
{
    return m_handler;
}

// Call the correct server shim based on method unique ID.
erpc_status_t Calculator_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory, Transport * transport)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case Calculator_interface::m_addId:
        {
            erpcStatus = add_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case Calculator_interface::m_subtractId:
        {
            erpcStatus = subtract_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case Calculator_interface::m_multiplyId:
        {
            erpcStatus = multiply_shim(codec, messageFactory, transport, sequence);
            break;
        }

        case Calculator_interface::m_divideId:
        {
            erpcStatus = divide_shim(codec, messageFactory, transport, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for add of Calculator interface.
erpc_status_t Calculator_service::add_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t a;
    int32_t b;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(a);

    codec->read(b);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->add(a, b);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, Calculator_interface::m_serviceId, Calculator_interface::m_addId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for subtract of Calculator interface.
erpc_status_t Calculator_service::subtract_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t a;
    int32_t b;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(a);

    codec->read(b);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->subtract(a, b);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, Calculator_interface::m_serviceId, Calculator_interface::m_subtractId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for multiply of Calculator interface.
erpc_status_t Calculator_service::multiply_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t a;
    int32_t b;
    int32_t result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(a);

    codec->read(b);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->multiply(a, b);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, Calculator_interface::m_serviceId, Calculator_interface::m_multiplyId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for divide of Calculator interface.
erpc_status_t Calculator_service::divide_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t a;
    int32_t b;
    float result;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(a);

    codec->read(b);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = m_handler->divide(a, b);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBufferRef(), transport->reserveHeaderSize());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset(transport->reserveHeaderSize());

        // Build response message.
        codec->startWriteMessage(message_type_t::kReplyMessage, Calculator_interface::m_serviceId, Calculator_interface::m_divideId, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}
