/*
 * Calculator service demonstrating remote procedure calls
 */

/*
 * Generated by erpcgen 1.14.0 on Thu Oct 30 12:45:04 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "c_calculator_client.h"
#include "calculator_client.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
Calculator_client *s_Calculator_client = nullptr;
#else
ERPC_MANUALLY_CONSTRUCTED_STATIC(Calculator_client, s_Calculator_client);
#endif

int32_t add(int32_t a, int32_t b)
{
    int32_t result;
    result = s_Calculator_client->add(a, b);

    return result;
}

int32_t subtract(int32_t a, int32_t b)
{
    int32_t result;
    result = s_Calculator_client->subtract(a, b);

    return result;
}

int32_t multiply(int32_t a, int32_t b)
{
    int32_t result;
    result = s_Calculator_client->multiply(a, b);

    return result;
}

float divide(int32_t a, int32_t b)
{
    float result;
    result = s_Calculator_client->divide(a, b);

    return result;
}

void initCalculator_client(erpc_client_t client)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(s_Calculator_client == nullptr);
    s_Calculator_client = new Calculator_client(reinterpret_cast<ClientManager *>(client));
#else
    erpc_assert(!s_Calculator_client.isUsed());
    s_Calculator_client.construct(reinterpret_cast<ClientManager *>(client));
#endif
}

void deinitCalculator_client(void)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (s_Calculator_client != nullptr)
    {
        delete s_Calculator_client;
        s_Calculator_client = nullptr;
    }
#else
    s_Calculator_client.destroy();
#endif
}
